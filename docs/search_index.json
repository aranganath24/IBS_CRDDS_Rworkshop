[["index.html", "An R Primer for Social Scientists 1 Introduction", " An R Primer for Social Scientists Aditya Ranganath 2024-02-14 1 Introduction This workshop, sponsored by the Institute for Behavioral Science (IBS) and the Center for Research Data and Digital Scholarship (CRDDS) at the University of Colorado Boulder, explore important principles and tools for working with data in R. Its goal is not to provide a comprehensive introduction to the R language, but to provide a practical and example-driven discussion that serves as a starting point for your own exploration. Topics covered include: R as a calculator Object/Variable assignment Data structures Writing basic custom functions Iteration using the purrr package Importing and exporting data from R Functions for wrangling, visualizing, and processsing numeric data Automating basic data workflows using custom functions and iteration The workshop is designed for R beginners, and would be especially helpful for researchers who are interested in transitioning from proprietary data analysis packages such as SPSS and Stata into R. "],["preliminaries.html", "2 Preliminaries 2.1 R and RStudio Installation 2.2 The RStudio Interface 2.3 Install Packages 2.4 Load libraries", " 2 Preliminaries In this preliminary section, we’ll cover basic information that will help you to get started with RStudio. 2.1 R and RStudio Installation If you haven’t already, please go ahead and install both the R and RStudio applications. R and RStudio must be installed separately; you should install R first, and then RStudio. The R application is a bare-bones computing environment that supports statistical computing using the R programming language; RStudio is a visually appealing, feature-rich, and user-friendly interface that allows users to interact with this environment in an intuitive way. Once you have both applications installed, you don’t need to open up R and RStudio separately; you only need to open and interact with RStudio (which will run R in the background). Please follow these instructions to download R and R Studio; make sure you download the version of R appropriate for your operating system. 2.2 The RStudio Interface Now that we’ve installed and opened up RStudio, let’s familiarize ourselves with the RStudio interface. When we open up RStudio, we’ll see a window that looks something like this: Figure 2.1: The RStudio Interface If your interface doesn’t look exactly like this, it shouldn’t be a problem; we would expect to see minor cosmetic differences in the appearance of the interface across operating systems and computers (based on how they’re configured). However, you should see four distinct windows within the larger RStudio interface: The top-left window is known as the Source window. The Source window is where we can write our R scripts (including the code associated with this tutorial), and execute those scripts. We can also type in R code into the “Console” window (bottom-left window), but it is preferable to write our code in a script within the source window. That’s because scripts can be saved (while code written into the console cannot); writing scripts therefore allows us to keep track of what we’re doing, and facilitates the reproducibility of our work. Note that in some cases, we may not see a Source window when we first open RStudio. In that case, to start a new script, simply click the File button on the RStudio menu bar, scroll down to New File button, and then select R Script from the menu bar that opens up. It’s also worth noting that the outputs of certain functions will appear in the Source window. In the context of our tutorial, when we want to view our datasets, we will use the View() function, which will display the relevant data within a new tab in the Source window. The top-right window is the Environment/History pane of the RStudio interface. The “Environment” tab of this window provides information on the datasets we’ve loaded into RStudio, as well as objects we have defined (we’ll talk about objects more later in the tutorial). -The “History” tab of the window provides a record of the R commands we’ve run in a given session. The bottom-right window is the Files/Plots/Packages/Help/Viewer window. The “Files” tab displays our computer’s directories and file structures and allows us to navigate through them without having to leave the R environment. The “Plots” tab is the tab where we can view any visualizations that we create. Within the “Plots” tab, make note of the “Zoom” button, which we can use to enlarge the display of our visualizations if they’re too compressed in the “Plots” window. Also, note the “Export” button within the “Plots” tab (next to the “Zoom” button); we can use this button to export the displayed visualization to a .png or .jpeg file that can be used outside of RStudio. The “Packages” tab provides information on which packages have been installed, as well as which packages are currently loaded (more on packages in Sections 2.3 and 2.4 below) The “Help” tab displays documentation for R packages and functions. If you want to know more about how a package or function work, we can simply type a “?” followed by the package or function’s name (no space between the question mark and the name) and relevant information will be displayed within the “Help” tab. The “Viewer” tab displays HTML output. If we write code that generates an HTML file, we can view it within the “Viewer” tab. The bottom-left window is the Console/Terminal/Jobs window. The “Console” tab is where we can see our code execute when we run our scripts, as well as certain outputs produced by those scripts. In addition, if there are any error or warning messages, they will be printed to the “Console” tab. We can also type code directly into the console, but as we noted earlier, it is better practice to write our code in a script and then run it from there. The “Terminal”, “Jobs” tabs are not relevant for our workshop. We’ll briefly provide an overview of “R Markdown” towards the end of the lesson. 2.3 Install Packages R is an open-source programming language for statistical computing that allows users to carry out a wide range of data analysis and visualization tasks (among other things). One of the big advantages of using R is that it has a very large user community among social scientists, statisticians, and digital humanists, who frequently publish R packages. One might think of packages as workbooks of sorts, which contain a well-integrated set of R functions, scripts, data, and documentation; these “workbooks” are designed to facilitate certain tasks or implement useful procedures. These packages are then shared with the broader R user community, and at this point, anyone who needs to accomplish the tasks to which the package addresses itself can use the package in the context of their own projects. The ability to use published packages considerably simplifies the work of applied data research using R; it means that we rarely have to write code entirely from scratch, and can build on the code that others have published in the form of packages. This allows applied researchers to focus on substantive problems, without having to get too bogged down in complicated programming tasks. In this workshop, we will use the following packages to carry out relevant data analysis and visualization tasks (please click the relevant link to learn more about a given package; note that the tidyverse is not a single package, but rather an entire suite of packages used for common data science and analysis tasks): + tidyverse: + wosr To install a package in R, we can use the install.packages() function. A function is essentially a programming construct that takes a specified input, runs this input (called an “argument”) through a set of procedures, and returns an output. In the code block below, the name of the package we want to install (here, the tidyverse suite) is enclosed within quotation marks and placed within parentheses after printing install.packages Running the code below will effectively download the tidyverse suite of packages to our computer: # Installs &quot;tm&quot; package install.packages(&quot;tidyverse&quot;) To run this code in your own R session: First, copy the code from the codeblock above (you can copy the code to your clipboard by hovering over the top-right of the code-block and clicking the “copy” icon; you can also highlight the code and copy from the Edit menu of your browser). Then, start a new R script within RStudio; if you want to keep a future record of your work, you may want to save this script to your computer (perhaps in the same folder to which you downloaded the tutorial data). We can save our scripts via the RStudio “File” menu. Paste the code into the script, highlight it, and click the “Run” button that is just above the Source window. Alternatively, instead of copying/pasting, you can manually type in the code from the codeblock into your script (manually typing in the code is slower, but often a better way to learn than copy/pasting). After you’ve run the code, watch the code execute in the console, and look for a message confirming that the package has been successfully installed. Below, we can see how that line of code should look in your script, and how to run it: Figure 2.2: Installing tidyverse in R Script Please note that you can follow along with the tutorial on your own computers by transferring all of the subsequent codeblocks into your script in just this way. Run each codeblock in your RStudio environment as you go, and you should be able to replicate the entire tutorial on your computer. You can copy-paste the workshop code if you wish, but we recommend actually retyping the code into your script, since this will help you to more effectively familiarize yourself with the process of writing code in R. Note that the codeblocks in the tutorial usually have a comment, prefaced by a hash (“#”). When writing code in R (or any other command-line interface) it is good practice to preface one’s code with brief comments that describe what a block of code is doing. Writing these comments can allow someone else (or your future self) to read and quickly understand the code more easily than otherwise might be the case. The hash before the comment effectively tells R that the subsequent text is a comment, and should be ignored when running a script. If one does not preface the comment with a hash, R wouldn’t know to ignore the comment, and would throw an error message. Now, let’s install the other packages we mentioned above, using the same install.packages() function: install.packages(&quot;psych&quot;) install.packages(&quot;fastDummies&quot;) install.packages(&quot;janitor&quot;) All of the packages we need are now installed! Note that it’s also possible to install multiple packages in a single command by passing the names of the packages you wish to install to the install.packages() function as a vector, which is created with the c() function: # installs multiple packages using a vector install.packages(c(&quot;psych&quot;, &quot;fastDummies&quot;, &quot;janitor&quot;)) 2.4 Load libraries However, while our packages are installed, they are not yet ready to use. Before we can use our packages, we must load them into our environment. We can think of the process of loading installed packages into a current R environment as analogous to opening up an application on your phone or computer after it has been installed (even after an application has been installed, you can’t use it until you open it!). To load (i.e. “open”) an R package, we pass the name of the package we want to load as an argument to the library() function. For example, if we want to load our tidyverse packages into the current environment, we can type: # Loads tidyverse packages into memory library(tidyverse) At this point, the full suite of the tidyverse suite’s functionality is available for us to use. Now, let’s go ahead and load the remainder of the packages that we’ll need: # loads remainder of required packages library(psych) library(fastDummies) library(janitor) At this point, the packages are loaded and ready to go! One important thing to note regarding the installation and loading of packages is that we only have to install packages once; after a package is installed, there is no need to subsequently reinstall it. However, we must load the packages we need (using the library function) every time we open a new R session. In other words, if we were to close RStudio at this point and open it up later, we would not need to install these packages again, but would need to load the packages again. "],["r-as-a-calculator.html", "3 R as a Calculator", " 3 R as a Calculator At its most basic, R can be used as a calculator. For instance: # calculates 2+2 2+2 ## [1] 4 # calculates 65 to the power of 4 65^4 ## [1] 17850625 While this is a useful starting point, the possibility of assigning values to objects (or variables) considerably increases the scope of the operations we are able to carry out. We turn to object assignment in the next sub-section. "],["object-assignment-and-manipulation.html", "4 Object assignment and manipulation", " 4 Object assignment and manipulation The concept of object (or variable) assignment is a fundamental concept when working in a scripting environment; indeed, the ability to easily assign values to objects is what allows us to easily and intuitively manipulate and process our data in a programmatic setting. To better understand the mechanics of object assignment, consider the following: # assign value 5 to new object named x x&lt;-5 In the code above, we use R’s assignment operator, &lt;-, to assign the value 5 to an object named x. Now that an object named x has been created and assigned the value 5, printing x in our console (or printing x in our script and running it) will return the value that has been assigned to the x object, i.e. 5: # prints value assigned to &quot;x&quot; x ## [1] 5 More generally, the process of assignment effectively equates the output created by the code on the right side of the assignment operator (&lt;-) to an object with a name that is specified on the left side of the assignment operator. Whenever we want to look at the contents of an object (i.e. the output created by the code to the right side of the assignment operator), we simply print the name of the object in the R console (or print the name and run it within a script). Let’s create another object, named y, and assign it the value “12”: # assign value 12 to new object named y y&lt;-12 As we noted above, we can print the value that was assigned to y by printing its name: # prints value assigned to &quot;y&quot; y ## [1] 12 It’s possible to use existing objects to assign values to new ones. For example, we can assign the sum of x and y to a new object that we’ll name xy_sum: # creates a new object, named &quot;xy_sum&quot; whose value is the sum of &quot;x&quot; and &quot;y&quot; xy_sum&lt;-x+y Now, let’s print the contents of xy_sum # prints contents of &quot;xy_sum&quot; xy_sum ## [1] 17 As expected, we see that the value assigned to xy_sum is “17” (i.e. the sum of the values assigned to x and y). It is possible to change the value assigned to a given object. For example, let’s say we want to change the value assigned to x from “5” to “8”: # assign value of &quot;8&quot; to object named &quot;x&quot; x&lt;-8 We can now confirm that x is now associated with the value “8” # prints updated value of &quot;x&quot; x ## [1] 8 It’s worth noting that updating the value assigned to x will not automatically update the value assigned to xy_sum (which, recall, is the sum of x and y). If we print the value assigned to xy_sum, note that it is still “17”): xy_sum ## [1] 17 In order for the value assigned to xy_sum to be updated with the new value of x, we must run the assignment operation again: # assigns sum of &quot;y&quot; and newly updated value of &quot;x&quot; to &quot;xy_sum&quot; object xy_sum&lt;-x+y Now, the value of xy_sum should reflect the updated value of x, which we can confirm by printing the value of xy_sum: # prints value of &quot;xy_sum&quot; xy_sum ## [1] 20 Note that the value assigned to xy_sum is now “20” (the sum of “8” and “12”), rather than “17” (the sum of “5” and “12”). While the examples above were very simple, we can assign virtually any R code, and by extension, the data structure(s) generated by that code (such as datasets, vectors, graphs/plots etc.) to an R object. When naming your objects, try to be descriptive, so that the name of the object signifies something about its corresponding value. Below, consider a simple example of an object, named our_location that has been assigned a non-numeric value. It’s value is a string, or textual information: # assigns text string &quot;Boulder, CO&quot; to our_location&lt;-&quot;Boulder, CO&quot; We can print string that has been assigned to the location object by typing the name of the object in our console, or running it from our script: # prints value of &quot;our_location&quot; object our_location ## [1] &quot;Boulder, CO&quot; Note that generally speaking, you have a lot of flexibility in naming your R objects, but there are certain rules. For example, object names must start with a letter, and cannot contain any special symbols (they can only contain letters, numbers, underscores, and periods). Also, object names cannot contain multiple unconnected words; if you’d like to use multiple words or phrases, connect the discrete elements with an underscore (_), or use camel case (where different words are distinguished by beginning each discrete word begins with a capitalized letter). It is also worth emphasizing that object names are case sensitive; in order to print the value assigned to an object, that object’s name must be printed exactly as it was created. For example, if we were to type our_Location, we would get an error, since there is no our_Location object (only an our_location object): our_Location ## Error in eval(expr, envir, enclos): object &#39;our_Location&#39; not found "],["data-structures.html", "5 Data Structures 5.1 Vectors 5.2 Data Frames 5.3 Lists 5.4 Identifying Data Structures", " 5 Data Structures We now turn to a brief overview of some important data structures that help us to work with data in R. We will consider three data structures that are particularly useful: vectors, data frames, and lists. Note that this is not an exhaustive treatment of data structures in R; there are other structures, such as matrices and arrays, that are also important. However, we will limit our discussion to the data structures that are essential for getting started with data-based social scientific research in R. 5.1 Vectors In R, a vector is a sequence of values. A vector is created using the c() function. For example, let’s make a vector with some arbitrary numeric values: In R, a vector is a sequence of values. A vector is created using the c() function. For example, let’s make a vector with some arbitrary numeric values: # makes vector with values 5,7,55,32 c(5, 7, 55, 32) ## [1] 5 7 55 32 If we plan to work with this numeric vector again later in our workflow, it makes sense to assign it to an object, which we’ll call arbitrary_values: # assigns vector of arbitrary values to new object named &quot;arbitrary_values&quot; arbitrary_values&lt;-c(5,7,55.6,32.5) Now, whenever we want to print the vector assigned to the arbitrary_values object, we can simply print the name of the object: # prints vector assigned to &quot;arbitrary_values&quot; object arbitrary_values ## [1] 5.0 7.0 55.6 32.5 It is possible to carry out mathematical operations with numeric vectors; for instance, let’s say that we want to double the values in the arbitrary_values vector; to do so, we can simply multiply arbitrary_values by 2, which yields a new vector where each numeric element is twice the corresponding element in arbitrary_values. Below, we’ll create a new vector that doubles the values in arbitrary_values, assign it to a new object named arbitrary_values_2x, and print the contents of arbitrary_values_2x: # creates a new vector that doubles the values in &quot;arbitrary_values&quot; and assigns it to a new object named &quot;arbitrary_values_2x&quot; ## [1] &quot;arbitrary_values_2x&quot; arbitrary_values_2x&lt;-arbitrary_values*2 # prints contents of &quot;arbitrary_values_2x&quot; arbitrary_values_2x ## [1] 10.0 14.0 111.2 65.0 Now, let’s say we want to add different vectors together; the code below creates a new vector by adding together arbitrary_values and arbitrary_values_2x: # adds &quot;arbitrary_values&quot; vector and &quot;arbitrary_values_2x&quot; vector arbitrary_values + arbitrary_values_2x ## [1] 15.0 21.0 166.8 97.5 Note that each element of the resulting vector printed above is the sum of the corresponding elements in arbitrary_values and arbitrary_values_2x. Other arithmetic operations on numeric vectors are also possible, and you may wish to explore these on your own as an exercise. In many cases, it is useful to extract a specific element from a vector. Each element in a given vector is assigned an index number, starting with 1; that is, the first element in a vector is assigned an index value of 1, the second element of a vector is assigned an index value of 2, and so on. We can use these index values to extract our desired vector elements. In particular, we can specify the desired index within square brackets after printing the name of the vector object of interest. For example, let’s say we want to extract the 3rd element of the vector in arbitrary_values. We can do so with the following: # extracts third element of &quot;arbitrary_values_2x&quot; vector arbitrary_values[3] ## [1] 55.6 It is also possible to extract a range of values from a vector using index values. For example, let’s say we want to extract a new vector comprised of the second, third, and fourth numeric elements in arbitrary_values; we can do so with the following: # extracts a new vector comprised of the 2nd, 3rd, and 4th elements of the existing &quot;arbitrary_values&quot; vector arbitrary_values[2:4] ## [1] 7.0 55.6 32.5 Thus far, we have been working with numeric vectors, where each of the vector’s elements is a numeric value, but it is also possible to create vectors in which the elements are strings (i.e. text). Such vectors are know as character vectors. For example, the code below creates a character vector of the first four months of the year, and assigns it to a new object named months_four: # creates character vector whose elements are the first four months of the year, and assigns the vector to a new object named &quot;months_four&quot; months_four&lt;-c(&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;) Let’s now print the character vector assigned to months_four: # prints contents of &quot;months_four&quot; months_four ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; We can extract elements from character vectors using index values in the same way we did so for elements in a numeric vector. For example: # extracts second element of &quot;months_four&quot; object (i.e. the &quot;February&quot; string) months_four[2] ## [1] &quot;February&quot; # subsets the second and third elements of &quot;months_four&quot; object (i.e. the &quot;February&quot; and &quot;March&quot; strings, which are extracted as a new character vector) months_four[2:3] ## [1] &quot;February&quot; &quot;March&quot; 5.2 Data Frames The data frame structure is the workhorse of data analysis in R. A data frame resembles a table, of the sort you might generate in a spreadsheet application. Often, the most important (and arduous) step in a data analysis workflow is to assemble disparate strands of data into a tractable data frame. What does it mean for a data frame to be “tractable”? One way to define this concept more precisely is to appeal to the concept of “tidy” data, which is often referenced in the data science world. Broadly speaking, a “tidy” data frame is a table in which: Each variable has its own column Each observation has its own row Each value has its own cell We will work extensively with data frames later in the workshop, but let’s generate a simple data frame from scratch, and assign it to a new object. We will generate a data frame containing “dummy” country-level data on basic economic, geographic, and demographic variables, and assign it to a new object named country_df. The data frame is created through the use of the data.frame() function, which has already been programmed into R. Column names and the corresponding column values are passed to the data.frame() function in the manner below, and the function effectively binds these different columns together into a table: # Creates a dummy country-level data frame country_df&lt;-data.frame(Country=c(&quot;Country A&quot;, &quot;Country B&quot;, &quot;Country C&quot;), GDP=c(8000, 30000, 23500), Population=c(2000, 5400, 10000), Continent=c(&quot;South America&quot;, &quot;Europe&quot;, &quot;North America&quot;)) To observe the structure of the table, we can print it to the R console by simply printing the name of the object to which it has been assigned: # prints &quot;country_df&quot; data frame to console country_df ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America One nice feature of R Studio is that instead of simply printing our data frames into the console, we can view a nicely formatted version of our data frame by passing the name of the data frame object through the View() function. For example, the code below will bring up the country_df data frame as a new tab in R Studio: # pulls up &quot;country_df&quot; data frame in R Studio data viewer View(country_df) Note the “tidy” features of this simple data frame: Each of the variables (i.e. GDP, Population, Continent) has its own column Each of the (country-level) observations has its own row Each of the values (i.e. country-level information about a given variable) has its own distinct cell We will explore data frames, and the process of extracting information from them, at greater length in subsequent sections. 5.3 Lists In R, a list is a data structure that allows us to conveniently store a variety of different objects, of various types. For example, we can use a list to vectors, data frames, visualizations and graphs–basically any R object you can think of! It is also possible to store a list within a list. Lists allow us to keep track of the various objects we create, and are therefore a useful data management tool. In addition, lists are very helpful to use when we want to perform iterative operations across multiple objects. We can create lists in R using the list() function; the arguments to this function are the objects that we want to include in the list. In the code below, we’ll create a list (assigned to an object named example_list) that contains some of the objects we create earlier in the lesson: the arbitrary_values vector, the months_four vector, and the country_df data frame. # creates list whose elements are the &quot;arbitrary_values&quot; numeric vector, the &quot;months_four&quot; character vector, and the &quot;country_df&quot; data frame, and assigns it to a new object named &quot;example_list&quot; example_list&lt;-list(arbitrary_values, months_four, country_df) Now that we’ve created our list object, let’s print out its contents: # prints contents of &quot;example_list&quot; example_list ## [[1]] ## [1] 5.0 7.0 55.6 32.5 ## ## [[2]] ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; ## ## [[3]] ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America As you can see, our list contains each of the various specified objects within a single, unified structure. We can access specific elements within a list using the specific index number of the desired element, in much the same way we did for vectors. When extracting a single list element from a list, the convention is to enclose the index number of the desired list element in double square brackets. For example, if we want to extract the country-level data frame from example_list, we can use the following: # extracts country-level data frame from &quot;example_list&quot;; the country-level data frame is the third element in &quot;example_list&quot; example_list[[3]] ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America If we want to subset a list, and extract more than one list element as a separate list, we can do so by creating a vector of the index values of the desired elements, and enclosing it in single brackets after the name of the list object. For example, if we wanted to generate a new list that contained only the first and third elements of example_list (the numeric vector of arbitrary values and the data frame), we would use the following syntax: example_list[c(1,3)] ## [[1]] ## [1] 5.0 7.0 55.6 32.5 ## ## [[2]] ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America While list elements are not automatically named, we can name our list element using the names() function. The first step to define a character vector of desired names. We can specify any names we’d like but for the sake of illustration, let’s say we want to name the first list element “element1”, the second list element “element2”, and the third list element “element3”. Let’s create a vector of our desired names, and assign it to an object named name_vector: # creates a character vector of desired names for list elements, and assigns it to a new object named &quot;name_vector&quot; name_vector&lt;-c(&quot;element1&quot;, &quot;element2&quot;, &quot;element3&quot;) Now, we’ll assign these names in name_vector to the list elements in example_list with the following # assigns names from &quot;name_vector&quot; to list elements in &quot;example_list&quot; names(example_list)&lt;-name_vector Let’s now print the contents of example_list: # prints contents of &quot;example_list&quot; example_list ## $element1 ## [1] 5.0 7.0 55.6 32.5 ## ## $element2 ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; ## ## $element3 ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America Note that the list elements now have names attached to them; the first character string in name_vector is assigned as the name of the first element in example_list, the second character string in name_vector is assigned as the name of the second element in example_list, and so on. Practically speaking, we can now extract list elements using the assigned names. For example, if we want to extract the data frame from example_list, we could do so by its assigned name (“element3”), as follows: # Extracts the data frame from &quot;example_list&quot; by its assigned name example_list[[&quot;element3&quot;]] ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America Note that even after assigning names to list elements, you can still extract elements by their index value, if you would prefer to do so: # # Extracts the &quot;element3&quot; data frame from &quot;example_list&quot; by its index number example_list[[3]] ## Country GDP Population Continent ## 1 Country A 8000 2000 South America ## 2 Country B 30000 5400 Europe ## 3 Country C 23500 10000 North America 5.4 Identifying Data Structures It is useful to be able to quickly identify the data structure of a given object. Indeed, one way that things can go wrong when processing or analyzing data in R is that a given function expects a certain type of data structure as an input, but encounters something else, which will cause the function to throw an error or perform unexpectedly. In such circumstances, it is especially useful to be able to quickly double-check the data structure of a given object. We can quickly ascertain this information by passing a given object as an argument to the class() function, which will provide information about the object’s data structure. For example, let’s say we want to confirm that example_list is indeed a list: # print the data structure of the &quot;example_list&quot; object class(example_list) ## [1] &quot;list&quot; Let’s take another example: # print the data structure of the &quot;months_four&quot; object class(months_four) ## [1] &quot;character&quot; Note that we can read “character”, as “character vector”. Similarly, we can read “numeric” as “numeric vector”: # print the data structure of the &quot;arbitrary_values&quot; object class(arbitrary_values) ## [1] &quot;numeric&quot; "],["writing-functions.html", "6 Writing Functions", " 6 Writing Functions As we mentioned earlier, a function is a programming construct that takes a set of inputs (also known as arguments), manipulates those inputs/arguments in a specific way (the body of the function), and returns an output that is the product of how those inputs are manipulated in the body of the function. It is much like a recipe, where the recipe’s ingredients are analogous to a function’s inputs, the instructions about how to combine and process those ingredients are analogous to the body of the function, and the end product of the recipe (for example, a cake) is analogous to the function’s output. R packages are essentially pre-written collections of functions organized around a given theme, and for a large number of data processing and analysis tasks, one can rely on these pre-written functions. In some cases, however, you may want to write your own functions from scratch. Why might you want to write your own functions? Sometimes, there won’t be a convenient pre-programmed function available to accomplish a given task, which will require you to write your own custom function. Writing your own functions will allow you to automate your workflows Writing functions will allow you to write more concise and readable code. Writing your own functions can be challenging, but this section will provide you with some basic intuition for how the process works. To develop this intuition, we’ll use a very simple example. Let’s say you have a large collection of temperature data, measured in Fahrenheit, and you want to convert these data to Celsius. Recall that the formula to convert from Fahrenheit to Celsius is the following, where “C” represents temperature in Celsius, and “F” represents temperature in Fahrenheit: # fahrenheit to Celsius formula, where &quot;F&quot; is fahrenheit input C=(F-32)*(5/9) Recall that at its most basic level, R is a calculator; if for example, we have a Fahrenheit measurement of 55 degrees, we can convert this to Celsius by plugging 55 into the conversion formula: # Converts 55 degrees fahrenheit to Celsius (55-32)*(5/9) ## [1] 12.77778 This is easy enough, but if we have a large amount of temperature data that requires processing, we wouldn’t want to carry out this calculation using arithmetic operators for each measurement in our data collection; that could quickly become unwieldy and tedious. Instead of repeatedly using arithmetic operators, we can wrap the Fahrenheit-to-Celsius conversion formula into a function: # Generates function that takes fahrenheit value (&quot;fahrenheit_input&quot;) and returns a value in Celsius, and assigns the function to an object named &quot;fahrenheit_to_celsius_converter&quot; fahrenheit_to_celsius_converter&lt;-function(fahrenheit_input){ celsius_output&lt;-(fahrenheit_input-32)*(5/9) return(celsius_output) } Let’s unpack the code above, which we used to create our function: We declare that we are creating a new function with the word function; within the parenthesis after function, we specify the function’s argument(s). Here, the function’s argument is an input named fahrenheit_input. The name of the argument(s) is arbitrary, and can be anything you like; ideally, its name should be informed by relevant context. Here, the argument/input to the function is a temperature value expressed in degrees Fahrenheit, so the name “fahrenheit_input” describes the nature of this input. After enclosing the function’s arguments within parentheses, we print a right-facing curly brace {, and then define the body of the function (i.e. the recipe), which specifies how we want to transform this input. In particular, we take fahrenheit_input, subtract 32, and then multiply by 5/9, which transform the input to the celsius temperature scale. We’ll tell R to assign this transformed value to a new object, named celsius_output. In the function’s final line, return(celsius_output), we specify the value we want the function to return. Here, we are saying that we want the function to return the value that was assigned to celsius_output. We then close the function by typing a left-facing curly brace below the return statement }. Just as we can assign data or visualizations to objects that allow us to subsequently retrieve the outputs of our code, so too with functions. Here, we’ll assign the function we have just return to an object named fahrenheit_to_celsius_converter. After creating our function by running that code, we can use the newly created fahrenheit_to_celsius function to perform our Fahrenheit to Celsius transformations. Let’s say we have a Fahrenheit value of 68, and want to transform it to Celsius. Instead of the following calculation: # Uses arithmetic operation to convert 68 degrees Fahrenheit to Celsius (68-32)*(5/9) ## [1] 20 We can use our function: # Uses &quot;fahrenheit_to_celsius_converter&quot; function to convert 68 degrees Fahrenheit to Celsius fahrenheit_to_celsius_converter(fahrenheit_input=68) ## [1] 20 Above, we passed the argument “fahrenheit_input=68” to the fahrenheit_to_celsius_converter function that we created; the function then took this value (68), plugged it into “fahrenheit_input” within the function and assigned the resulting value to “celsius_output”; it then returned the value of “celsius_output” (20) back to us. Let’s try another one: fahrenheit_to_celsius_converter(fahrenheit_input=22) ## [1] -5.555556 In short, we can specify any value for the “fahrenheit_input” argument; this value will be substituted for “fahrenheit_input” in the expression celsius_output&lt;-(fahrenheit_input-32)*(5/9), after which the value of celsius_output will be returned to us. Even though the Fahrenheit to Celsius conversion formula is not particularly complex, it is clear that writing a function to perform this calculation is nonetheless more efficient than repeatedly performing the relevant arithmetic operation. As the operations you need to perform on your data become more complex, and the number of times you need to perform those operations increases, the benefits of wrapping those operations into a function become ever-more apparent. "],["iteration.html", "7 Iteration", " 7 Iteration Once we have a function written down, it is straightforward to apply that function to multiple inputs in an iterative fashion. For example, let’s say you have four different Fahrenheit temperature values that you would like to convert to celsius, using the fahrenheit_to_celsius_converter we developed above. One option would be to apply the fahrenheit_to_celsius_converter function to each of the Fahrenheit temperature inputs individually. For example, let’s say our Fahrenheit values, which we’d like to convert to celsius, are the following: 45.6, 95.9, 67.8, 43. We could, of course, run these values through the function individually, as below: fahrenheit_to_celsius_converter(fahrenheit_input=45.6) ## [1] 7.555556 fahrenheit_to_celsius_converter(fahrenheit_input=95.9) ## [1] 35.5 fahrenheit_to_celsius_converter(fahrenheit_input=67.8) ## [1] 19.88889 fahrenheit_to_celsius_converter(fahrenheit_input=43.) ## [1] 6.111111 This is manageable with a collection of only four Fahrenheit values, but would quickly become tedious if you had a substantially larger set of Fahrenheit temperature values that required conversion. Instead of manually applying the function to each individual input value, we can instead put these values into a vector, and then iteratively apply the fahrenheit_to_celsius_converter function to each of these vector elements. Let’s first assign our Fahrenheit temperature values to a numeric vector object named fahrenheit_input_vector: # makes a vector out of Fahrenheit values we want to convert, and assigns it to a new object named &quot;fahrenheit_input_vector&quot; fahrenheit_input_vector&lt;-c(45.6, 95.9, 67.8, 43) Our goal is to also iteratively apply our function to all of these vector elements, and deposit the transformed results into a new vector. In programming languages, functions are typically applied to to multiple inputs in an iterative fashion using a construct known as a for-loop, which some of you may already be familiar with. R users also frequently use specialized functions (instead of for-loops) to iterate over elements; this is often faster, or at the very least, makes R scripts more readable. One family of these iterative functions is the “Apply” family of functions. A more recent set of functions that facilitate iteration is part of the tidyverse, and is found within the purrr package. These functions are known as map() functions, and we will use them here to iteratively apply our functions to multiple inputs. Let’s see how we can use a map() function to sequentially apply the fahrenheit_to_celsius_converter() function we created to several different values for the “fahrenheit_input” argument, contained in fahrenheit_input_vector. We’ll pass fahrenheit_input_vector as the first argument to the map_dbl() function, and fahrenheit_to_celsius_converter (i.e. the function we want to apply iteratively to the elements in `thefahrenheit_input_vector ) as the second argument. The result of this operation will be a new “results vector”, containing the transformed temperature values for each input in the original vector of Fahrenheit values (fahrenheit_input_vector). We’ll assign this result/output vector to a new object named celsius_outputs_vector: # Iteratively applies the &quot;fahrenheit_to_celsius_converter&quot; to celsius input values in &quot;fahrenheit_input_vector&quot; and assigns the resulting vector of converted temperature values to &quot;celsius_ouputs_vector&quot; celsius_outputs_vector&lt;-map_dbl(fahrenheit_input_vector, fahrenheit_to_celsius_converter) In short, the code above takes ``fahrenheit_input_vector(i.e. a vector with the numbers 45.6, 95.9, 67.8, 43), and runs each of these numbers through thefahrenheit_converter()function, and sequentially deposits the transformed result to the newly createdcelsius_outputs_vector()``` object, which contains the following elements: # prints contents of &quot;celsius_outputs_vector&quot; celsius_outputs_vector ## [1] 7.555556 35.500000 19.888889 6.111111 More explicitly, the code that reads celsius_outputs_vector&lt;-map_dbl(fahrenheit_input_vector, fahrenheit_converter) did the following: Pass 45.6 (the first element in the input vector, fahrenheit_input_vector) to the fahrenheit_converter() function, and place the output (7.555556) as the first element in a new vector of transformed values, named celsius_outputs_vector. Pass 95.9 (the second element in the input vector, fahrenheit_input_vector) to the fahrenheit_converter() function, and deposit the output (35.500000) as the second element in celsius_outputs_vector. Pass 67.8 (the third element in the input vector, fahrenheit_input_vector) to the fahrenheit_converter() function, and deposit the output (19.888889) as the third element in celsius_outputs_vector. Pass 43 (the fourth element in the input vector, fahrenheit_input_vector) to the fahrenheit_converter() function, and deposit the output (6.111111) as the fourth element in celsius_outputs_vector. There are a variety of map() functions from the purrr package, and the precise one you should use turns on the number of arguments used by the function (in this example, there is of course only one argument, i.e. “fahrenheit_input”), and the desired class of the output (i.e. numeric vector, character vector, data frame, list etc.). For example, let’s say we want to apply the fahrenheit_to_celsius_converter function iteratively to the input values in fahrenheit_input_vector, but that we want the output values to be stored as a list, rather than as a vector. Instead of using the map_dbl() function, we can use the map() function, which always returns outputs as a list. Below, we pass our input vector (fahrenheit_input_vector), and the function we want to iteratively apply to the elements of the input vector (fahrenheit_converter) to the map() function. We’ll assign the output list to a new object named celsius_outputs_list: # iteratively applies the &quot;fahrenheit_to_celsius_converter&quot; function to the input values in &quot;fahrenheit_input_vector&quot;, and assigns the list of celsius output values to a new object named &quot;celsius_outputs_list&quot; celsius_outputs_list&lt;-map(fahrenheit_input_vector, fahrenheit_to_celsius_converter) Let’s print out the list of output values: # prints contents of &quot;celsius_outputs_list&quot; celsius_outputs_list ## [[1]] ## [1] 7.555556 ## ## [[2]] ## [1] 35.5 ## ## [[3]] ## [1] 19.88889 ## ## [[4]] ## [1] 6.111111 We can confirm that celsius_outputs_list is indeed a list using the class() function that we introduced earlier: # checks data structure of &quot;celsius_outputs_list&quot; class(celsius_outputs_list) ## [1] &quot;list&quot; Now, let’s say we we want to organize our information in a data frame, where one column represents our Fahrenheit input values, and the other column represents the corresponding Celsius output values. To do so, we’ll first slightly modify our function to return a data frame: # Creates function that takes an input value in degrees Fahrenheit (fahrenheit_input), converts this value to Celsius, and returns a data frame with the input Fahrenheit temperature value as one column, and the corresponding Celsius temperature value as another column; the function is assigned to a new object named &quot;fahrenheit_to_celsius_converter_df&quot; fahrenheit_to_celsius_converter_df&lt;-function(fahrenheit_input){ celsius_output&lt;-(fahrenheit_input-32)*(5/9) celsius_output_df&lt;-data.frame(fahrenheit_input, celsius_output) return(celsius_output_df) } Now, let’s test out this new function for a single “fahrenheit_input” value, to make sure it works as expected; we’ll test it out for a value of 63 degrees Fahrenheit: # applies &quot;fahrenheit_to_celsius_converter_df&quot; function to input value of 63 degrees Fahrenheit fahrenheit_to_celsius_converter_df(fahrenheit_input=63) ## fahrenheit_input celsius_output ## 1 63 17.22222 Having confirmed that the function works as expected, let’s now assemble a dataset using multiple Fahrenheit input values, where one column consists of these input values, and the second column consists of the corresponding Celsius outputs. We can do so using the map_dfr() function from the purrr package, which is a cousin of the map() and map_dbl() functions we explored above. While the map() function returns function outputs in a list, and the map_dbl() function returns function outputs in a numeric vector, the map_dfr() is used to bind together multiple function outputs rowwise into a data frame. To make this more concrete, let’s consider the code below, which uses map_dfr() to iteratively apply the fahrenheit_to_celsius_converter_df function to the Fahrenheit values in fahrenheit_input_vector, and assemble the resulting rows into a data frame that is assigned to a new object named celsius_outputs_df: # Iteratively applies the &quot;fahrenheit_to_celsius_converter_df&quot; function to input values in &quot;fahrenheit_input_vector&quot; to generate a data frame with column of input Fahrenheit values, and column of corresponding output Celsius values; assigns this data frame to a new object named &quot;celsius_outputs_df&quot; celsius_outputs_df&lt;-map_dfr(fahrenheit_input_vector, fahrenheit_to_celsius_converter_df) Let’s now print the contents of celsius_outputs_df: # prints contents of celsius_outputs_df ## fahrenheit_input celsius_output ## 1 45.6 7.555556 ## 2 95.9 35.500000 ## 3 67.8 19.888889 ## 4 43.0 6.111111 We now have a dataset with one column consisting of our Fahrenheit inputs (taken from fahrenheit_input_vector), and a second column consisting of our Celsius outputs (derived by applying the fahrenheit_to_celsius_converter_df() function to our vector of input values, `fahrenheit_input_vector). We’ve just covered three different purrr functions: map() (which returns a list), map_dbl() (which returns a vector), and map_dfr() (which returns a dataframe). There are other map functions which return different types of objects; you can see a list of these other map functions by inspecting the documentation for the map() function: ?map The process of iteratively applying a function with more than one argument is beyond the scope of the workshop, but the same general principles are at work in those cases. If you’d like to explore the process of iteratively applying a function with two arguments, or more than two arguments, check out the documentation for the map2() and pmap() functions, respectively. Before we move into the next section, let’s consider one more example of how you can use your own custom-written functions in conjunction with the iteration functions in the purrr package to write scripts that can help you to automate tedious tasks. In particular, we’ll demonstrate the utility of the list data structure in helping you to carry out such automation tasks. Let’s say, for example, that you have temperature values stored in Fahrenheit, for multiple countries, and want to quickly convert those country-level values to degrees Celsius. Suppose that these Fahrenheit values are stored in a series of vectors: # creates sample country-level Fahrenheit data for Country A countryA_fahrenheit&lt;-c(55,67,91,23, 77, 98, 27) # creates sample country-level Fahrenheit data for Country B countryB_fahrenheit&lt;-c(33,45,11,66, 44) # creates sample country-level Fahrenheit data for Country C countryC_fahrenheit&lt;-c(60,55,12,109) # creates sample country-level Fahrenheit data for Country D countryD_fahrenheit&lt;-c(76, 24, 77, 78) Let’s say that we want to take all of these vectors, and iteratively pass them as arguments to the fahrenheit_to_celsius_converter_df function, thereby creating four country-specific data frames that have the original Fahrenheit values in one column and the transformed Celsius values in the other column. The easiest way to do this is to first put our input vectors into a list, which we’ll assign to a new object named temperature_input_list: # Creates list of input vectors and assigns this list to new object named &quot;input_list&quot; temperature_input_list&lt;-list(countryA_fahrenheit, countryB_fahrenheit, countryC_fahrenheit, countryD_fahrenheit) Now, we’ll use the map() function to iteratively pass the vectors in temperature_input_list as arguments to the fahrenheit_to_celsius_converter_df function, and deposits the resulting data frames into a list; we’ll assign this list that contains the output data frames to a new list object, named processed_temperature_data_list: # Iteratively passes vectors in &quot;temperature_input_list&quot; as arguments to &quot;fahrenheit_to_celsius_converter_df&quot; and deposits the resulting data frames to a list, which is assigned to a new object named &quot;processed_temperature_data_list&quot; processed_temperature_data_list&lt;-map(temperature_input_list, fahrenheit_to_celsius_converter_df) In effect, the code above takes the countryA_fahrenheit vector, uses it as the argument to the fahrenheit_to_celsius_converter_df function, and deposits the resulting data frame as the first element in the processed_temperature_data_list list; it then takes the countryB_fahrenheit vector, uses it as the argument to the fahrenheit_to_celsius_converter_df function, and deposits the resulting data frame as the second element in the processed_temperature_data_list list; and so on. Let’s print the contents of processed_temperature_data_list and confirm that our data frames have been created as expected: # prints contents of &quot;processed_temperature_data_list&quot; processed_temperature_data_list ## [[1]] ## fahrenheit_input celsius_output ## 1 55 12.777778 ## 2 67 19.444444 ## 3 91 32.777778 ## 4 23 -5.000000 ## 5 77 25.000000 ## 6 98 36.666667 ## 7 27 -2.777778 ## ## [[2]] ## fahrenheit_input celsius_output ## 1 33 0.5555556 ## 2 45 7.2222222 ## 3 11 -11.6666667 ## 4 66 18.8888889 ## 5 44 6.6666667 ## ## [[3]] ## fahrenheit_input celsius_output ## 1 60 15.55556 ## 2 55 12.77778 ## 3 12 -11.11111 ## 4 109 42.77778 ## ## [[4]] ## fahrenheit_input celsius_output ## 1 76 24.444444 ## 2 24 -4.444444 ## 3 77 25.000000 ## 4 78 25.555556 As an exercise, try and extract a given dataset from processed_temperature_data_list using the indexing method we discussed above. Additionally, see if you can assign names to the list elements in processed_temperature_data_list. "],["data-transfer-part-1-reading-in-data.html", "8 Data Transfer Part 1: Reading in Data", " 8 Data Transfer Part 1: Reading in Data Typically, the first step when working with research data in R Studio is to load your relevant data into memory. There are many ways to do this, and the precise way in which you will do so will depend on where your data is stored, and how it is structured. Below, we’ll cover the process of reading your data into R Studio under a couple of different scenarios. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
